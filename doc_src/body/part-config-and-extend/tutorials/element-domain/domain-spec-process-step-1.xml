<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE subsection PUBLIC "urn:pubid:dita4practitioners.com:doctypes:dita:subsection" "subsection.dtd"> 
<subsection id="domain-spec-step-one">
  <title>Element Domain Specialization Step 1: Design The Domain Element Types</title>
  <shortdesc>The first step in specialization is designing your markup.</shortdesc>
  <body>
    <p><draft-comment>[Reference to more general discussion of markup analysis and
                design.]</draft-comment> For this exercise, the element types to be declared are all
            specializations of <xmlelement>keyword</xmlelement>, which is a pretty typical use case: you
            just need a few additional keyword-type elements to mark up mentions of things that are
            specific to your documentation.</p>
    <p>The element types to be declared are:
          <dl>
        <dlentry>
          <dt>
            <xmlelement>xmlelem</xmlelement>
          </dt>
          <dd>Identifies mentions of XML element types. Intended typographic effect is to
              put the name in a monospaced font, surrounded by angle brackets: <xmlelement>an-element</xmlelement>.</dd>
        </dlentry>
        <dlentry>
          <dt>
            <xmlelement>xmlatt</xmlelement>
          </dt>
          <dd>Identifies mentions of XML attributes. Intended typographic effect is to put the name
                        in monospaced font with a leading <q>@</q> sign:
                            <xmlatt>an-attribute</xmlatt>.</dd>
        </dlentry>
        <dlentry>
          <dt>
            <xmlelement>textent</xmlelement>
          </dt>
          <dd>Identifies mentions of XML text entities. Intended typographic effect is to put the
                        name in monospaced font with a leading ampersand and trailing semicolon:
                            <textent>a-text-entity-name</textent>. (To be pedantic about it, the
                        formatting specification actually produces an entity <i>reference</i> rather
                        than a mention of an entity <i>name</i>, but Charles Goldfarb and I are
                        probably the only people on the planet who would both notice the difference
                        and care about the distinction. So we add the closing semicolon (<q>entity
                            reference close</q>), because that's how people expect something
                        starting with an ampersand to look. Alternatively, I could have used a
                        different typographic convention—maybe small caps—and omitted the ampersand,
                        but that would probably have just made it more confusing.)</dd>
        </dlentry>
        <dlentry>
          <dt>
            <xmlelement>parment</xmlelement>
          </dt>
          <dd>Identifies mentions of XML parameter entities. Intended typographic effect is to put
                        the name in monospaced font with a leading percent sign and a trailing
                        semicolon: <parameterentity>a-parameter-entity-name</parameterentity>. (To be pedantic
                        again, technically, the <q>%</q> is part of the parameter entity name and
                        also serves as the entity reference open, so even if for text entities we
                        didn't show the ampersand we would show the <q>%</q> for parameter entity
                        references. Again, probably only Charles Goldfarb and I know or care about
                        the difference. But I am compelled by years of deep standards work and an
                        uncontrollable pedantic streak to mention that there is in fact a
                        difference. Not that anyone cares. And yes, I was that kid who always said
                            <q>technically, a peanut is not a nut, it's a legume.</q>)</dd>
        </dlentry>
        <dlentry>
          <dt>
            <xmlelement>numcharref</xmlelement>
          </dt>
          <dd>Identifies mentions of XML numeric character references. Intended typographic effect
                        is to put the number in monospaced font with a leading <q>numeric character
                            reference open</q> (&amp;#) and closing semicolon:
                            <numcharref>x2014</numcharref>. The content should be the numeric value,
                        preceded by an <q>x</q> for hex values. (I don't even have to say it do,
                        I?)</dd>
        </dlentry>
      </dl>
    </p>
    <p>None of these elements allows any subelements, so their content models will all be just
            #PCDATA.</p>
    <p>Domain modules must be given a short name that is used in the filenames, entity names, and in
            the <xmlatt>class</xmlatt> attributes. For this tutorial, the domain module name is
                <q>xml.</q> In practice, you should give your domains more distinctive names so
            there is minimal chance of name collisions with other domains. You see this with the
            DITA 1.2 Learning and Training specializations, where both the domains and the element
            types all start with <q>lc</q> (for <q>Learning Content</q>). This is essentially the
            same as having a namespace prefix on your names, but of course DITA 1.x cannot use
            namespaces, so you have to make do with the simple convention of distinguishing bits in
            your names.</p>
  </body>
</subsection>
