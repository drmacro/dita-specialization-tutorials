<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE subsection PUBLIC "urn:pubid:dita4practitioners.com:doctypes:dita:subsection" "subsection.dtd">
<subsection
  id="topic-id">
  <title>Using Keys for <q>Variable</q> Text</title>
  <shortdesc>A key-defining topicref may both point to a resource and include subelements to use as
    the link text for links that refer to the key. When the key definition only has subelements, it
    can function as a <q>variable</q> that can have different values in different root map
    contexts.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>keys<indexterm>as variables</indexterm></indexterm>
        <indexterm>variables<indexterm>key definitions
          for</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>A typical use of this feature of keys is for things like product names or
      other string values that may be different from publication to publication
      but have the same value throughout a given publication. It is roughly
      equivalent to the way that variables are used in desktop publishing
      systems like FrameMaker or the way text entities are often used in SGML
      and XML.</p>
    <p>You can get the same effect by using content references to
      <xmlelement>ph</xmlelement> or <xmlelement>text</xmlelement> elements but putting the
      text in the key definition is more direct and therefore easier to author
      and maintain.</p>
    <p>I put the term <q>variable</q> in quotes because the key-based facility is not really as
      flexible and complete as one might want. In particular, it does not reflect the scoping
      semantics that people familiar with programming languages might expect. For example, in a
      programming context, the same variable name may have different values in different scopes
        (<q>shadowing,</q> in programming parlance), but because key definitions are global in DITA
      1.2, a given key name can only resolve to a single value within the scope of a given root map.
      There is no mechanism in DITA 1.2 for having key definitions that are scoped to a subtree.</p>
    <p>Another limitation of using keys as variables is that there’s no way to define fallback text
            to use when a key is undefined. For example, if you put text in a
                <xmlelement>keyword</xmlelement> element that also points to a key that defines link text,
            the rules of DITA say that the text in the <xmlelement>keyword</xmlelement> element is always
            used as the link text, in preference to any text defined in key definitions. But for
            truly re-usable topics you’d like to be able to say <q>use the text from the key
                definition unless there’s not one, in which case use this text.</q> The fallback
            text might be a meaningful value that, for example, reflects a processor-defined
            default, or it might be something like <codeph>{variable <b>foo</b> not
                defined}</codeph> so reviewers can see that a required variable definition wasn’t
            created. There is no way to do that in topics because key definitions are only defined
            in maps. You can, of course, define fallback definitions for the keys, but then each
            user of the topic has to know to include the fallback key definitions, which also have
            to be managed, documented, and so on.</p>
    <p>If you need a variable that can be scoped to the map tree or to specific topics or subtopics,
      then there are at least two possible alternatives:<ul id="ul_lkr_txn_gf">
        <li>Extend the key facility to provide for scoped key definitions. This
        approach is actively being discussed by the DITA TC for DITA
        1.3<indexterm>DITA<indexterm>1.3</indexterm></indexterm> as of April,
        2012, and it seems likely that some sort of key scoping mechanism will
        be defined for DITA 1.3. Note that there are other motivations for
        scoped keys. For example, you might want the same key name to point to
        different topics within different subtrees of a publication that
        reflects different products. Using the printer manual example, if you
        create a publication that combines different printer models in one
        master publication, the generic tasks would not be able to reflect
        different model-specific content without some way to scope the key
        definitions.</li>
        <li>Define an alternate variable facility that does not use keys at all. This is doable
                    within the current DITA architecture. The DITA for Publishers project includes
                    an experimental <q>variables</q> domain that defines markup and processing to
                    support variables within maps, topicrefs, and topics. It also defines fallback
                    semantics. This capability serves as an example of how a solution could work and
                    demonstrates that it’s relatively easy to implement, at least given map-driven
                    XSLT processing, which the DITA for Publishers project also provides.</li>
      </ul></p>
    <p>So while the DITA 1.2 key reference facility does provide a form of <q>variable</q> the
            mechanism is weak at best and insufficient for many use cases at worst. My personal
            feeling is that a key-based solution to variables is not appropriate and that a separate
            facility specifically for variables would be a better solution. While the DITA Technical
            Committee does not necessarily agree with me, it doesn’t matter. One of the cool aspects
            of DITA is that I can define and implement the mechanism in a conforming fashion and
            provide it without the need to change the base DITA architecture. If my solution proves
            useful and people use it, the TC may then consider codifying it in the base standard, or
            it may not. There’s no need to depend entirely on the TC to decide.</p>
    <p>At the same time, I could be wrong about key-based variables, and the TC may in fact develop
      a key-based solution that satisfies all the requirements. In any case, the need for scoped
      keys is undeniable regardless of whether they are used as variables, too.</p>
  </body>
</subsection>
