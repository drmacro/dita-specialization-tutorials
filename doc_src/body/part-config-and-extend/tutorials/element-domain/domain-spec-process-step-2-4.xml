<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE subsection PUBLIC "urn:pubid:dita4practitioners.com:doctypes:dita:subsection" "subsection.dtd"> 
<subsection id="step2-4">
  <title>Step 2-4. Declare <xmlatt>class</xmlatt> Attributes</title>
  <body>
    <p>For each element type, create a separate attribute declaration that defines the <xmlatt>class</xmlatt> attribute value: <codeblock>
&lt;!-- ====================================================
     XML Construct Domain Module
    
     Author: <i>your name here</i>

     Copyright (c) 2011 <i>copyright holder</i>
     
     <i>license to use or not use or whatever</i>
     ==================================================== -->
 
&lt;!ENTITY % xmlelem    "xmlelem"  >

&lt;!--                    LONG NAME: XML Element                            -->
&lt;!ENTITY % xmlelem.content 
  " 
  (#PCDATA)*
  "
>
&lt;!ENTITY % xmlelem.attributes
  '
  %univ-atts;          
  keyref
    CDATA
    #IMPLIED
  outputclass 
    CDATA
    #IMPLIED    
  '
>
&lt;!ELEMENT xmlelem %xmlelem.content; >
&lt;!ATTLIST xmlelem %xmlelem.attributes; >
          
<b>&lt;!ATTLIST xmlelem     %global-atts;  class CDATA "+ topic/keyword xml-d/xmlelem "  ></b>
          </codeblock></p>
    <p>(The <parameterentity>global-atts</parameterentity> parameter entity is defined in one of the base DITA
        module files.)</p>
    <p>There are several reasons for keeping the <xmlatt>class</xmlatt> attribute declaration separate from the main element and attribute declaration. By putting all the class attribute declarations together in one place, it makes it easier to find the declarations and see what the specialization hierarchy is. It also makes it easier to re-use the element declarations by cut and paste. (This pattern becomes much more critical in XSD-based specialization, where the re-use of base element type declarations is by reference rather than via cut and paste.)</p>
    <p>The complete <filepath>xmlDomain.mod</filepath> file should look this this: <codeblock>
&lt;!-- =============================================================

     XML construct domain
     
     Provides phrase-level elements for identifying mentions of
     XML constructs: element types, attributes, etc.
     
     Copyright (c) 2011 <i>copyright holder</i>
     
     <i>license to use or not use or whatever</i>
     
     ============================================================= -->

&lt;!-- ============================================================= -->
&lt;!--                   ELEMENT NAME ENTITIES                       -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % xmlelem "xmlelem"  >
&lt;!ENTITY % xmlatt  "xmlatt"   >
&lt;!ENTITY % textent "textent"  >     
&lt;!ENTITY % parment "parment"  >
&lt;!ENTITY % numcharref "numcharref" >   

&lt;!-- ============================================================= -->
&lt;!--                    ELEMENT DECLARATIONS                       -->
&lt;!-- ============================================================= -->


&lt;!--                    LONG NAME: XML Element                            -->
&lt;!ENTITY % xmlelem.content 
  " 
  (#PCDATA)*
  "
>
&lt;!ENTITY % xmlelem.attributes
  '
  %univ-atts;          
  keyref
    CDATA
    #IMPLIED
  outputclass 
    CDATA
    #IMPLIED    
  '
>
&lt;!ELEMENT xmlelem %xmlelem.content; >
&lt;!ATTLIST xmlelem %xmlelem.attributes; >

&lt;!--                    LONG NAME: XML Attribute                            -->
&lt;!ENTITY % xmlatt.content 
  " 
  (#PCDATA)*
  "
>
&lt;!ENTITY % xmlatt.attributes
  '
  %univ-atts;          
  keyref
    CDATA
    #IMPLIED
  outputclass 
    CDATA
    #IMPLIED    
  '
>
&lt;!ELEMENT xmlatt %xmlatt.content; >
&lt;!ATTLIST xmlatt %xmlatt.attributes; >

&lt;!--                    LONG NAME: Text entity -->
&lt;!ENTITY % textent.content 
  " 
  (#PCDATA)*
  "
>
&lt;!ENTITY % textent.attributes
  '
  %univ-atts;          
  keyref
    CDATA
    #IMPLIED
  outputclass 
    CDATA
    #IMPLIED    
  '
>
&lt;!ELEMENT textent %textent.content; >
&lt;!ATTLIST textent %textent.attributes; >

&lt;!--                    LONG NAME: Parameter entity -->
&lt;!ENTITY % parment.content 
  " 
  (#PCDATA)*
  "
>
&lt;!ENTITY % parment.attributes
  '
  %univ-atts;          
  keyref
    CDATA
    #IMPLIED
  outputclass 
    CDATA
    #IMPLIED    
  '
>
&lt;!ELEMENT parment %parment.content; >
&lt;!ATTLIST parment %parment.attributes; >

&lt;!--                    LONG NAME: Numeric character reference -->
&lt;!ENTITY % numcharref.content 
  " 
  (#PCDATA)*
  "
>
&lt;!ENTITY % numcharref.attributes
  '
  %univ-atts;          
  keyref
    CDATA
    #IMPLIED
  outputclass 
    CDATA
    #IMPLIED    
  '
>
&lt;!ELEMENT numcharref %numcharref.content; >
&lt;!ATTLIST numcharref %numcharref.attributes; >


&lt;!-- ============================================================= -->
&lt;!--                    SPECIALIZATION ATTRIBUTE DECLARATIONS      -->
&lt;!-- ============================================================= -->


&lt;!ATTLIST xmlelem     %global-atts;  class CDATA "+ topic/keyword xml-d/xmlelem "  >
&lt;!ATTLIST xmlatt      %global-atts;  class CDATA "+ topic/keyword xml-d/xmlatt "  >
&lt;!ATTLIST textent     %global-atts;  class CDATA "+ topic/keyword xml-d/textent "  >
&lt;!ATTLIST parment     %global-atts;  class CDATA "+ topic/keyword xml-d/parment "  >
&lt;!ATTLIST numcharref  %global-atts;  class CDATA "+ topic/keyword xml-d/numcharref "  >


&lt;!-- ================== End XML Domain ==================== --></codeblock> </p>
    <p>You should be seeing that this is a largely mechanical process that is mostly cutting and pasting of repeated declaration patterns. All of the actual thinking goes into the element type design. The declaration activity is purely mechanical.</p>
    <p>In particular, having created the first declaration for <xmlelement>xmlelem</xmlelement>, you copy it, paste it, and simply change "xmlelem" to the new element type name everywhere it occurs in that element's declarations.</p>
  </body>
</subsection>
