<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "urn:pubid:dita4practitioners.com:doctypes:dita:chapter" "chapter.dtd">
<chapter
  id="topic-id">
  <title>General Structural Patterns in DITA</title>
  <shortdesc>If you understand DITA’s basic structural patterns you can understand at least the
        basic intent of any new DITA elements you encounter. Likewise, you will be well prepared to
        define your own specializations with a minimum of mental effort.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>markup patterns</indexterm>
        <indexterm>structural patterns</indexterm>
        <indexterm/>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>Most XML vocabularies reflect consistent patterns for how to construct and organize common types of structures: titled divisions, publications, figures, lists, etc. Ideally a given document type is rigidly consistent in its structural patterns, although few actually are. By contrast, DITA must be, with very few exceptions, rigidly consistent in its patterns because of the need to enable specialization. </p>
    <p>The basic structural patterns of DITA are essentially those patterns inherent in the
            structures defined by the base vocabulary, that is, all the elements that are base types
            (and not specialized from a more-general type). Because specializations must have
            content models that are no less constrained than their base type’s content model, all
            conforming specializations must reflect the same basic structural patterns as defined by
            the base DITA types. If you understand these patterns then you understand the basics of
            all possible DITA specializations. This is part of the point of specialization: it
            conserves and interchanges knowledge about markup rules.</p>
    <note
      type="tip">The DITA 1.2 distribution includes a set of <q>base</q>
      document type shells<indexterm>document type
      shell<indexterm>base</indexterm></indexterm> that only include the base
      vocabulary modules<indexterm>vocabulary module<indexterm>inclusion in
      document type shells</indexterm></indexterm>. These shells can be useful
      when learning about the base vocabulary because documents that use them
      will only allow base elements.</note>
    <p>An important thing to keep in mind: the normative definition of DITA’s structural rules is
            the <i>prose</i> of the DITA standard, not the DTDs or schemas. Likewise, the XSD schema
            definitions take precedence over the DTD definitions when they are different. This means
            that just because a DITA DTD or XSD allows a particular combination of elements doesn’t
            necessarily mean that combination of elements is conforming. This is because there are
            many things you cannot say in a DTD or XSD schema that are still disallowed by the text
            and intent of the DITA standard.</p>
    <p>For example, <xmlelement>p</xmlelement> allows nearly anything in its content, so through a nested
                <xmlelement>p</xmlelement> element you can do all sorts of things. For example, you could
            have a <xmlelement>fig</xmlelement> that contains a <xmlelement>p</xmlelement> that contains another
                <xmlelement>fig</xmlelement>:<codeblock>&lt;fig>
  &lt;p>
    &lt;fig/>
  &lt;/p>
&lt;/fig></codeblock></p>
    <p>But figures are not intended to nest, and the nesting of <xmlelement>fig</xmlelement> violates the
      general DITA principle that titled things should not nest. And certainly most, if not all
      DITA-aware processors would not know what to do with a nested figure like this.</p>
    <p>So <q>but the DTD allows it</q> is never a valid argument for why a particular combination of
      markup should be considered correct.</p>
    <p>Valid arguments include:<ul
      id="ul_cmz_foa_mb">
      <li>My reading of the standard indicates it is allowed</li>
      <li>It is a sensible markup structure and here’s why...</li>
      <li>A constraint imposed by the DITA standard is arbitrary, unnecessary, or unjustified</li>
      <li>The standard structure is sensible, but there is a missing level of generality that, if
          provided, would cover my case.</li>
      </ul></p>
    <p>The DITA standard is not perfect in its design. DITA was originally developed by IBM, and it
            reflects a specific set of initial requirements specific to IBM’s hardware and software
            documentation and authoring practices. The original DITA architects and the DITA
            Technical Committee have strived to make things appropriately general and to accommodate
            as many requirements as possible, but there is always room for improvement.</p>
    <p>For example, DITA 1.2 reflects several refinements of the base vocabulary
      to address instances of all of the foregoing arguments. The DITA 1.2
      general task reflects the realization that the original task was too
      constrained and that a more general task model was required. For DITA
      1.3<indexterm>DITA<indexterm>1.3</indexterm></indexterm> I’ve proposed
      allowing figure within table and table within figure because not allowing
      it is arbitrarily constrained and I have what I think are solid use cases
      that need it (in particular, documents where tables are represented by
      images and figures whose display content happens to be tabular
      data).<fn>As it happened, the TC rejected my argument after I had written
      this paragraph. The agreed upon solution is to use single-cell tables to
      hold the table graphic.</fn></p>
    <p>I encourage thoughtful questioning of the DITA markup design—that’s how standards grow and
            improve and DITA exists to serve its users—but the questioning has to be thoughtful,
            which means a simple <q>but the DTD allows it</q> is not going to pass the <q>is this a
                thoughtful critique?</q> test. However, <q>the DTD allows it <i>and here’s why it
                    should</i>,</q> with a presentation of a reasoned argument or documented user
            requirements, does pass the test.</p>
    <p>It’s also important to make sure that your requirement isn’t already supported in some way by
            the existing markup design. There are many ways to do things in DITA, and some things
            are done in a way that long-time XML and SGML practitioners will not expect. One example
            is the use of attributes. DITA does not (cannot) allow the definition of
            element-type-specific attributes on specialized element types. This means you have to
            use nested <xmlelement>data</xmlelement> elements or specializations of
                <xmlelement>data</xmlelement>. This is definitely not the way most XML practitioners would
            normally work—defining new attributes to capture element-type-specific metadata is
            second nature for most of us. So it is best to ask the community how best to solve a
            particular markup question before spending too much time working out a new solution—it’s
            very likely that there’s a reasonable but non-obvious way to do what you want.</p>
  </body>
</chapter>
